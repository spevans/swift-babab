{"Typealiases.html#/s:5BABAB9BitArray8a":{"name":"BitArray8","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 8 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray16a":{"name":"BitArray16","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 16 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray32a":{"name":"BitArray32","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 32 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray64a":{"name":"BitArray64","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 64 elements.</p>"},"Typealiases.html#/s:5BABAB16BitmapAllocator8a":{"name":"BitmapAllocator8","abstract":"<p>A bitmap allocatior with capacity for 8 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator16a":{"name":"BitmapAllocator16","abstract":"<p>A bitmap allocatior with capacity for 16 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator32a":{"name":"BitmapAllocator32","abstract":"<p>A bitmap allocatior with capacity for 32 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator64a":{"name":"BitmapAllocator64","abstract":"<p>A bitmap allocatior with capacity for 64 items.</p>"},"Typealiases.html#/s:5BABAB18BitmapAllocator128a":{"name":"BitmapAllocator128","abstract":"<p>A bitmap allocatior with capacity for 128 items.</p>"},"Structs/NumberSetIterator.html#/s:5BABAB17NumberSetIteratorV7Elementa":{"name":"Element","abstract":"<p>The elements returned by the <code>NumberSetIterator</code> are of type <code>Int</code>.</p>","parent_name":"NumberSetIterator"},"Structs/NumberSetIterator.html#/s:5BABAB17NumberSetIteratorV8rawValueACyxGx_tcfc":{"name":"init(rawValue:)","abstract":"<p>Creates a new iterator from the specified value.</p>","parent_name":"NumberSetIterator"},"Structs/NumberSetIterator.html#/s:5BABAB17NumberSetIteratorV4nextSiSgyF":{"name":"next()","abstract":"<p>Advances to the next element and returns it, or <code>nil</code> if no next element exists.</p>","parent_name":"NumberSetIterator"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV7Elementa":{"name":"Element","abstract":"<p>The elements stored in the <code>NumberSet</code> are of type <code>Int</code>.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV8rawValuexvp":{"name":"rawValue","abstract":"<p>The underlying storage. Read only.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV7isEmptySbvp":{"name":"isEmpty","abstract":"<p>A Boolean value that indicates whether the set is empty.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV5countSivp":{"name":"count","abstract":"<p>The number of elements in the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV8capacitySivp":{"name":"capacity","abstract":"<p>The total number of elements that the set can contain without allocating new storage.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV5firstSiSgvp":{"name":"first","abstract":"<p>The first element of the collection.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetVACyxGycfc":{"name":"init()","abstract":"<p>Creates an empty set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetVyACyxGqd__ncSTRd__Si7ElementRtd__lufc":{"name":"init(_:)","abstract":"<p>Creates a new set from a finite sequence of items.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV8rawValueACyxGx_tcfc":{"name":"init(rawValue:)","abstract":"<p>Create a new set from a literal value.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV6insertySb8inserted_Si17memberAfterInserttSinF":{"name":"insert(_:)","abstract":"<p>Inserts the given element in the set if it is not already present.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV6update4withSiSgSin_tF":{"name":"update(with:)","abstract":"<p>Inserts the given element into the set unconditionally.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV6removeySiSgSiF":{"name":"remove(_:)","abstract":"<p>Removes the specified element from the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV11removeFirstSiyF":{"name":"removeFirst()","abstract":"<p>Removes the first element of the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV6remove2atS2i_tF":{"name":"remove(at:)","abstract":"<p>Removes the element at the given index of the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV9removeAll15keepingCapacityySb_tF":{"name":"removeAll(keepingCapacity:)","abstract":"<p>Removes all members from the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV8containsySbSiF":{"name":"contains(_:)","abstract":"<p>Returns a Boolean value that indicates whether the given element exists in the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV3minSiSgyF":{"name":"min()","abstract":"<p>Returns the minimum element in the sequence.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV3maxSiSgyF":{"name":"max()","abstract":"<p>Returns the maximum element in the sequence.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV10isDisjoint4withSbACyxG_tF":{"name":"isDisjoint(with:)","abstract":"<p>Returns a Boolean value that indicates whether this set has no members in common with the given set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV11subtractingyACyxGAEF":{"name":"subtracting(_:)","abstract":"<p>Returns a new set containing the elements of this set that do not occur in the given set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV5unionyACyxGAEnF":{"name":"union(_:)","abstract":"<p>Returns a new set with the elements of both this and the given set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV12intersectionyACyxGAEF":{"name":"intersection(_:)","abstract":"<p>Returns a new set with the elements that are common to both this set and the given set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV19symmetricDifferenceyACyxGAEnF":{"name":"symmetricDifference(_:)","abstract":"<p>Returns a new set with the elements that are either in this set or in the given set, but not in both.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV8subtractyyACyxGF":{"name":"subtract(_:)","abstract":"<p>Removes the elements of the given set from this set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV9formUnionyyACyxGnF":{"name":"formUnion(_:)","abstract":"<p>Adds the elements of the given set to the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV9formUnionyyqd__STRd__Si7ElementRtd__lF":{"name":"formUnion(_:)","abstract":"<p>Inserts the elements of the given sequence into the set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV16formIntersectionyyACyxGF":{"name":"formIntersection(_:)","abstract":"<p>Removes the elements of this set that aren’t also in the given set.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV23formSymmetricDifferenceyyACyxGnF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Removes the elements of the set that are also in the given set and adds the members of the given set that are","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV2eeoiySbACyxG_AEtFZ":{"name":"==(_:_:)","abstract":"<p>Returns a Boolean value indicating whether two sets have equal elements.</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV12makeIteratorAA0bcE0VyxGyF":{"name":"makeIterator()","abstract":"<p>Returns an iterator over the members of the set..</p>","parent_name":"NumberSet"},"Structs/NumberSet.html#/s:5BABAB9NumberSetV11descriptionSSvp":{"name":"description","abstract":"<p>A string that represents the contents of the set.</p>","parent_name":"NumberSet"},"Structs/ByteArrayIterator.html#/s:St7ElementQa":{"name":"Element","parent_name":"ByteArrayIterator"},"Structs/ByteArrayIterator.html#/s:5BABAB17ByteArrayIteratorV5arrayACyxGAA0bC0VyxG_tcfc":{"name":"init(array:)","abstract":"<p>Undocumented</p>","parent_name":"ByteArrayIterator"},"Structs/ByteArrayIterator.html#/s:St4next7ElementQzSgyF":{"name":"next()","parent_name":"ByteArrayIterator"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV8rawValuexvp":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV8capacitySivp":{"name":"capacity","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty array. All the elements are set to zero.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV8rawValueACyxGx_tcfc":{"name":"init(rawValue:)","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:ST8IteratorQa":{"name":"Iterator","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:ST7ElementQa":{"name":"Element","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:ST12makeIterator0B0QzyF":{"name":"makeIterator()","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sl5IndexQa":{"name":"Index","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in a nonempty array. Always zero.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV8endIndexSivp":{"name":"endIndex","abstract":"<p>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV5countSivp":{"name":"count","abstract":"<p>The number of elements in the array. This is fixed at the <code>bitWidth</code> of the underlying storage.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>Replaces the given index with its successor.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayVys5UInt8VSicip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the specified position.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV8popFirsts5UInt8VSgyF":{"name":"popFirst()","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>Returns the position immediately before the given index.</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV7popLasts5UInt8VSgyF":{"name":"popLast()","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sl11SubSequenceQa":{"name":"SubSequence","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Smyxqd__cSTRd__7ElementQyd__AARtzlufc":{"name":"init(_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm9repeating5countx7ElementQz_Sitcfc":{"name":"init(repeating:count:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm15reserveCapacityyySiF":{"name":"reserveCapacity(_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm15replaceSubrange_4withySny5IndexQzG_qd__ntSlRd__7ElementQyd__AFRtzlF":{"name":"replaceSubrange(_:with:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:SMy11SubSequenceQzSny5IndexQzGcip":{"name":"subscript(_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm6appendyy7ElementQznF":{"name":"append(_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm6insert_2aty7ElementQzn_5IndexQztF":{"name":"insert(_:at:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm6insert10contentsOf2atyqd__n_5IndexQztSlRd__7ElementQyd__AFRtzlF":{"name":"insert(contentsOf:at:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV9removeAllyyF":{"name":"removeAll()","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm9removeAll15keepingCapacityySb_tF":{"name":"removeAll(keepingCapacity:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm11removeFirst7ElementQzyF":{"name":"removeFirst()","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm11removeFirstyySiF":{"name":"removeFirst(_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV10removeLasts5UInt8VyF":{"name":"removeLast()","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:5BABAB9ByteArrayV10removeLastyySiF":{"name":"removeLast(_:)","abstract":"<p>Undocumented</p>","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:Sm6remove2at7ElementQz5IndexQz_tF":{"name":"remove(at:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"ByteArray"},"Structs/ByteArray.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp":{"name":"debugDescription","parent_name":"ByteArray"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the allocator.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV10entryCountSivp":{"name":"entryCount","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV14freeEntryCountSivp":{"name":"freeEntryCount","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV8hasSpaceSbvp":{"name":"hasSpace","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty allocator.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV8allocateSiSgyF":{"name":"allocate()","abstract":"<p>Allocate the next free entry.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV4free5entryySi_tF":{"name":"free(entry:)","abstract":"<p>Frees the entry allowing it to be reused.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the allocator.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV10entryCountSivp":{"name":"entryCount","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV14freeEntryCountSivp":{"name":"freeEntryCount","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV8hasSpaceSbvp":{"name":"hasSpace","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty allocator.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV8allocateSiSgyF":{"name":"allocate()","abstract":"<p>Allocate the next free entry.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV4free5entryySi_tF":{"name":"free(entry:)","abstract":"<p>Frees the entry allowing it to be reused.</p>","parent_name":"BitmapAllocator"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5Indexa":{"name":"Index","abstract":"<p>The <code>Index</code> type for a <code>BitArray</code> is an <code>Int</code>.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV7Elementa":{"name":"Element","abstract":"<p>The <code>Element</code> type for a <code>BitArry</code> is a <code>Bool</code> of value <code>true</code> or <code>false</code>.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV11SubSequencea":{"name":"SubSequence","abstract":"<p>A sequence that represents a contiguous subrange of the collection’s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV8rawValuexvp":{"name":"rawValue","abstract":"<p>The underlying storage.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in a nonempty array. Always zero.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV8endIndexSivp":{"name":"endIndex","abstract":"<p>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5countSivp":{"name":"count","abstract":"<p>The number of elements in the array. This is fixed at the <code>bitWidth</code> of the underlying storage.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>Returns the position immediately before the given index.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>Replaces the given index with its successor.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation of the array and its elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty array. All the elements are set to zero.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGxcfc":{"name":"init(_:)","abstract":"<p>Create a new array initialising the underlying storage to the supplied value.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVySbSicip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the specified position.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGSnySiGcip":{"name":"subscript(_:)","abstract":"<p>A subrange of the array&rsquo;s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyxSNySiGcip":{"name":"subscript(_:)","abstract":"<p>The integer value representing the array&rsquo;s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html":{"name":"BitArray","abstract":"<p>A type that uses a fixed width, unsigned integer as storage for an array of bits. The number of bits is fixed and by"},"Structs/BitmapAllocator.html":{"name":"BitmapAllocator","abstract":"<p>An allocator that uses an <code>UnsignedInteger</code> to store the allocated entries allowing upto <code>.bitWidth</code> entries to be"},"Structs/DoubleBitmapAllocator.html":{"name":"DoubleBitmapAllocator","abstract":"<p>An allocator that uses 2 <code>UnsignedInteger</code>s to store the allocated entries allowing upto 2x <code>.bitWidth</code> entries to"},"Structs/ByteArray.html":{"name":"ByteArray","abstract":"<p>Undocumented</p>"},"Structs/ByteArrayIterator.html":{"name":"ByteArrayIterator","abstract":"<p>Undocumented</p>"},"Structs/NumberSet.html":{"name":"NumberSet","abstract":"<p><code>NumberSet</code> uses a specified unsigned <code>FixedWidthInteger</code> as the storage for a Set containing the numbers"},"Structs/NumberSetIterator.html":{"name":"NumberSetIterator","abstract":"<p>An <code>Iterator</code> that return the elements of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/NumberSet.html\">NumberSet</a></code>.</p>"},"Functions.html#/s:5BABAB7hexDump_12startAddress9showASCIISSx_q_SbtSlRzs17FixedWidthIntegerR_SUR_s5UInt8V7ElementRtzr0_lF":{"name":"hexDump(_:startAddress:showASCII:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:5BABAB7hexDump_9showASCIISSx_SbtSlRzs5UInt8V7ElementRtzlF":{"name":"hexDump(_:showASCII:)","abstract":"<p>Undocumented</p>"},"Extensions/UnsafeMutableRawPointer.html#/s:Sv5BABABE19unalignedStoreBytes2of12toByteOffset2asyx_SixmtlF":{"name":"unalignedStoreBytes(of:toByteOffset:as:)","abstract":"<p>Stores a trivial type into raw memory at the specified offset.</p>","parent_name":"UnsafeMutableRawPointer"},"Extensions/UnsafeRawPointer.html#/s:SV5BABABE13unalignedLoad14fromByteOffset2asxSi_xmts17FixedWidthIntegerRzlF":{"name":"unalignedLoad(fromByteOffset:as:)","abstract":"<p>Returns a new instance of the given type, constructed from the raw memory at the specified offset.","parent_name":"UnsafeRawPointer"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE3bitySbSiF":{"name":"bit(_:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE3bityySi_SbtF":{"name":"bit(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE12lowestBitSetSiSgvp":{"name":"lowestBitSet","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE13highestBitSetSiSgvp":{"name":"highestBitSet","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE17clearLowestBitSetSiSgyF":{"name":"clearLowestBitSet()","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE18clearHighestBitSetSiSgyF":{"name":"clearHighestBitSet()","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE17littleEndianBytesxqd___tcSlRd__s5UInt8V7ElementRtd__Si5IndexRtd__lufc":{"name":"init(littleEndianBytes:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE14bigEndianBytesxqd___tcSlRd__s5UInt8V7ElementRtd__Si5IndexRtd__lufc":{"name":"init(bigEndianBytes:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABE8maskFrom8bitCountxSi_tF":{"name":"maskFrom(bitCount:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABSURzrlE3bcdxSgx_tcfc":{"name":"init(bcd:)","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/FixedWidthInteger.html#/s:s17FixedWidthIntegerP5BABABSURzrlE8bcdValuexSgvp":{"name":"bcdValue","abstract":"<p>Undocumented</p>","parent_name":"FixedWidthInteger"},"Extensions/Bool.html#/s:Sb5BABABEySbxcSzRzlufc":{"name":"init(_:)","abstract":"<p>Creates a new Boolean value from the given Integer.</p>","parent_name":"Bool"},"Extensions/BinaryInteger.html#/s:Sz5BABABEyxSbcfc":{"name":"init(_:)","abstract":"<p>Creates a new Integer value from the given Boolean.</p>","parent_name":"BinaryInteger"},"Extensions/BinaryInteger.html#/s:Sz5BABABE6binary10separatorsSSSb_tF":{"name":"binary(separators:)","abstract":"<p>Returns a <code>String</code> of the binary representation zero padded to the width of the value.</p>","parent_name":"BinaryInteger"},"Extensions/BinaryInteger.html#/s:Sz5BABABE5octal10separatorsSSSb_tF":{"name":"octal(separators:)","abstract":"<p>Returns a <code>String</code> of the octal representation zero padded to the width of the value.</p>","parent_name":"BinaryInteger"},"Extensions/BinaryInteger.html#/s:Sz5BABABE3hex10separatorsSSSb_tF":{"name":"hex(separators:)","abstract":"<p>Returns a <code>String</code> of the hexadecimal representation zero padded to the width of the value.</p>","parent_name":"BinaryInteger"},"Extensions/BinaryInteger.html":{"name":"BinaryInteger"},"Extensions/Bool.html":{"name":"Bool"},"Extensions/FixedWidthInteger.html":{"name":"FixedWidthInteger"},"Extensions/UnsafeRawPointer.html":{"name":"UnsafeRawPointer"},"Extensions/UnsafeMutableRawPointer.html":{"name":"UnsafeMutableRawPointer"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}