{"Typealiases.html#/s:5BABAB9BitArray8a":{"name":"BitArray8","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 8 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray16a":{"name":"BitArray16","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 16 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray32a":{"name":"BitArray32","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 32 elements.</p>"},"Typealiases.html#/s:5BABAB10BitArray64a":{"name":"BitArray64","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BitArray.html\">BitArray</a></code> with 64 elements.</p>"},"Typealiases.html#/s:5BABAB16BitmapAllocator8a":{"name":"BitmapAllocator8","abstract":"<p>A bitmap allocatior with capacity for 8 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator16a":{"name":"BitmapAllocator16","abstract":"<p>A bitmap allocatior with capacity for 16 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator32a":{"name":"BitmapAllocator32","abstract":"<p>A bitmap allocatior with capacity for 32 items.</p>"},"Typealiases.html#/s:5BABAB17BitmapAllocator64a":{"name":"BitmapAllocator64","abstract":"<p>A bitmap allocatior with capacity for 64 items.</p>"},"Typealiases.html#/s:5BABAB18BitmapAllocator128a":{"name":"BitmapAllocator128","abstract":"<p>A bitmap allocatior with capacity for 128 items.</p>"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the allocator.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV10entryCountSivp":{"name":"entryCount","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV14freeEntryCountSivp":{"name":"freeEntryCount","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV8hasSpaceSbvp":{"name":"hasSpace","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty allocator.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV8allocateSiSgyF":{"name":"allocate()","abstract":"<p>Allocate the next free entry.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/DoubleBitmapAllocator.html#/s:5BABAB21DoubleBitmapAllocatorV4free5entryySi_tF":{"name":"free(entry:)","abstract":"<p>Frees the entry allowing it to be reused.</p>","parent_name":"DoubleBitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the allocator.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV10entryCountSivp":{"name":"entryCount","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV14freeEntryCountSivp":{"name":"freeEntryCount","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV8hasSpaceSbvp":{"name":"hasSpace","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty allocator.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV8allocateSiSgyF":{"name":"allocate()","abstract":"<p>Allocate the next free entry.</p>","parent_name":"BitmapAllocator"},"Structs/BitmapAllocator.html#/s:5BABAB15BitmapAllocatorV4free5entryySi_tF":{"name":"free(entry:)","abstract":"<p>Frees the entry allowing it to be reused.</p>","parent_name":"BitmapAllocator"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5Indexa":{"name":"Index","abstract":"<p>The <code>Index</code> type for a <code>BitArray</code> is an <code>Int</code>.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV7Elementa":{"name":"Element","abstract":"<p>The <code>Element</code> type for a <code>BitArry</code> is an <code>Int</code> of value zero or one.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV11SubSequencea":{"name":"SubSequence","abstract":"<p>A sequence that represents a contiguous subrange of the collection’s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV8rawValuexvp":{"name":"rawValue","abstract":"<p>The underlying storage.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in a nonempty array. Always zero.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV8endIndexSivp":{"name":"endIndex","abstract":"<p>The array’s “past the end” position—that is, the position one greater than the last valid subscript argument.","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5countSivp":{"name":"count","abstract":"<p>The number of elements in the array. This is fixed at the <code>bitWidth</code> of the underlying storage.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>Returns the position immediately before the given index.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>Replaces the given index with its successor.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayV11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation of the array and its elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVACyxGycfc":{"name":"init()","abstract":"<p>Creates a new, empty array. All the elements are set to zero.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGSicfc":{"name":"init(_:)","abstract":"<p>Create a new array initiialising the underlying storage to the supplied value.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGSucfc":{"name":"init(_:)","abstract":"<p>Create a new array initiialising the underlying storage to the supplied value.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGxcfc":{"name":"init(_:)","abstract":"<p>Create a new array initiialising the underlying storage to the supplied value.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyS2icip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the specified position.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyACyxGSnySiGcip":{"name":"subscript(_:)","abstract":"<p>A subrange of the array&rsquo;s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html#/s:5BABAB8BitArrayVyxSNySiGcip":{"name":"subscript(_:)","abstract":"<p>The integer value representing the array&rsquo;s elements.</p>","parent_name":"BitArray"},"Structs/BitArray.html":{"name":"BitArray","abstract":"<p>A type that uses a fixed width, unsigned integer as storage for an array of bits. The number of bits is fixed and by default are set to zero.</p>"},"Structs/BitmapAllocator.html":{"name":"BitmapAllocator","abstract":"<p>An allocator that uses an <code>UnsignedInteger</code> to store the allocated entries allowing upto <code>.bitWidth</code> entries to be allocated.</p>"},"Structs/DoubleBitmapAllocator.html":{"name":"DoubleBitmapAllocator","abstract":"<p>An allocator that uses 2 <code>UnsignedInteger</code>s to store the allocated entries allowing upto 2x <code>.bitWidth</code> entries to be allocated.</p>"},"Functions.html#/s:5BABAB6hexNumySSxs17FixedWidthIntegerRzSURzlF":{"name":"hexNum(_:)","abstract":"<p>Returns a <code>String</code> description of the value zero padded to the width of the value.</p>"},"Functions.html#/s:5BABAB7hexDump_12startAddress9showASCIISSx_q_SbtSlRzs17FixedWidthIntegerR_SUR_s5UInt8V7ElementRtzr0_lF":{"name":"hexDump(_:startAddress:showASCII:)","abstract":"<p>Returns a</p>"},"Functions.html#/s:5BABAB7hexDump_9showASCIISSx_SbtSlRzs5UInt8V7ElementRtzlF":{"name":"hexDump(_:showASCII:)","abstract":"<p>Undocumented</p>"},"Extensions/UnsafeMutableRawPointer.html#/s:Sv5BABABE19unalignedStoreBytes2of12toByteOffset2asyx_SixmtlF":{"name":"unalignedStoreBytes(of:toByteOffset:as:)","abstract":"<p>Stores a trivial type into raw memory at the specified offset.</p>","parent_name":"UnsafeMutableRawPointer"},"Extensions/UnsafeRawPointer.html#/s:SV5BABABE13unalignedLoad14fromByteOffset2asxSi_xmts17FixedWidthIntegerRzlF":{"name":"unalignedLoad(fromByteOffset:as:)","abstract":"<p>Returns a new instance of the given type, constructed from the raw memory at the specified offset.","parent_name":"UnsafeRawPointer"},"Extensions/Int.html#/s:Si5BABABEySiSbcfc":{"name":"init(_:)","abstract":"<p>Creates a new Integer value from the given Boolean.</p>","parent_name":"Int"},"Extensions/Bool.html#/s:Sb5BABABEySbSicfc":{"name":"init(_:)","abstract":"<p>Creates a new Boolean value from the given Integer.</p>","parent_name":"Bool"},"Extensions/Bool.html":{"name":"Bool"},"Extensions/Int.html":{"name":"Int"},"Extensions/UnsafeRawPointer.html":{"name":"UnsafeRawPointer"},"Extensions/UnsafeMutableRawPointer.html":{"name":"UnsafeMutableRawPointer"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}